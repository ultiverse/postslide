import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useState } from 'react';
import { useProject } from '@/state/project.store';
import { useAutosave } from '@/hooks/useAutosave';
import { useKeyboardShortcuts } from '@/hooks/useKeyboardShortcuts';
const MIN_WIDTH = 1024;
export default function Editor() {
    useAutosave();
    useKeyboardShortcuts();
    const project = useProject((s) => s.project);
    const selectedSlideId = useProject((s) => s.selectedSlideId);
    const setSelectedSlide = useProject((s) => s.setSelectedSlide);
    const updateProjectTitle = useProject((s) => s.updateProjectTitle);
    const addSlide = useProject((s) => s.addSlide);
    const duplicateSlide = useProject((s) => s.duplicateSlide);
    const removeSlide = useProject((s) => s.removeSlide);
    const moveSlideUp = useProject((s) => s.moveSlideUp);
    const moveSlideDown = useProject((s) => s.moveSlideDown);
    const addBlock = useProject((s) => s.addBlock);
    const updateBlock = useProject((s) => s.updateBlock);
    const updateBullets = useProject((s) => s.updateBullets);
    const removeBlock = useProject((s) => s.removeBlock);
    const moveBlockUp = useProject((s) => s.moveBlockUp);
    const moveBlockDown = useProject((s) => s.moveBlockDown);
    const convertBlockKind = useProject((s) => s.convertBlockKind);
    const selectedSlide = project.slides.find((s) => s.id === selectedSlideId);
    const [w, setW] = useState(window.innerWidth);
    useEffect(() => {
        const onResize = () => setW(window.innerWidth);
        window.addEventListener('resize', onResize);
        return () => window.removeEventListener('resize', onResize);
    }, []);
    if (w < MIN_WIDTH) {
        return (_jsx("div", { className: "h-dvh grid place-items-center p-6 text-center", children: _jsxs("div", { children: [_jsx("h2", { className: "text-xl font-semibold mb-2", children: "Desktop required" }), _jsxs("p", { children: ["Please use a screen at least ", MIN_WIDTH, "px wide to edit. You can still preview on mobile."] })] }) }));
    }
    return (_jsxs("div", { className: "grid grid-cols-[280px_minmax(0,1fr)_320px] h-dvh", children: [_jsxs("aside", { className: "border-r p-4 space-y-2 overflow-y-auto", children: [_jsx("h2", { className: "font-semibold mb-2", children: "Slides" }), project.slides.map((s) => (_jsx("div", { onClick: () => setSelectedSlide(s.id), className: `p-2 rounded text-sm cursor-pointer ${s.id === selectedSlideId ? 'bg-primary text-primary-foreground' : 'bg-muted/30 hover:bg-muted/50'}`, children: s.blocks[0] && 'text' in s.blocks[0] ? s.blocks[0].text : 'Untitled slide' }, s.id))), _jsx("button", { onClick: addSlide, className: "w-full p-2 border border-dashed rounded text-sm hover:bg-muted/20", children: "+ Add Slide" })] }), _jsx("main", { className: "p-4 flex items-center justify-center bg-muted/10", children: _jsx("div", { className: "border rounded w-[540px] h-[540px] grid place-items-center text-center", children: _jsx("p", { className: "text-lg font-semibold", children: project.title }) }) }), _jsxs("aside", { className: "border-l p-4 space-y-4 overflow-y-auto", children: [_jsxs("div", { children: [_jsx("h2", { className: "font-semibold mb-2", children: "Project" }), _jsx("label", { className: "block text-sm mb-1", children: "Title" }), _jsx("input", { type: "text", value: project.title, onChange: (e) => updateProjectTitle(e.target.value), className: "w-full px-2 py-1 border rounded text-sm bg-background" })] }), selectedSlide && (_jsxs(_Fragment, { children: [_jsxs("div", { className: "border-t pt-4", children: [_jsx("h2", { className: "font-semibold mb-2", children: "Slide" }), _jsxs("div", { className: "space-y-2", children: [_jsx("button", { onClick: () => duplicateSlide(selectedSlide.id), className: "w-full px-2 py-1 border rounded text-sm hover:bg-muted/20", children: "Duplicate" }), _jsxs("div", { className: "flex gap-2", children: [_jsx("button", { onClick: () => moveSlideUp(selectedSlide.id), disabled: project.slides[0]?.id === selectedSlide.id, className: "flex-1 px-2 py-1 border rounded text-sm hover:bg-muted/20 disabled:opacity-50", children: "\u2191 Up" }), _jsx("button", { onClick: () => moveSlideDown(selectedSlide.id), disabled: project.slides[project.slides.length - 1]?.id === selectedSlide.id, className: "flex-1 px-2 py-1 border rounded text-sm hover:bg-muted/20 disabled:opacity-50", children: "\u2193 Down" })] }), _jsx("button", { onClick: () => removeSlide(selectedSlide.id), disabled: project.slides.length === 1, className: "w-full px-2 py-1 border border-destructive/50 text-destructive rounded text-sm hover:bg-destructive/10 disabled:opacity-50", children: "Delete Slide" })] })] }), _jsxs("div", { className: "border-t pt-4", children: [_jsx("h2", { className: "font-semibold mb-2", children: "Blocks" }), _jsxs("div", { className: "space-y-3", children: [selectedSlide.blocks.map((block, idx) => (_jsxs("div", { className: "p-2 border rounded space-y-2", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsxs("select", { value: block.kind, onChange: (e) => convertBlockKind(selectedSlide.id, block.id, e.target.value), className: "flex-1 px-2 py-1 border rounded text-sm bg-background", children: [_jsx("option", { value: "title", children: "Title" }), _jsx("option", { value: "subtitle", children: "Subtitle" }), _jsx("option", { value: "body", children: "Body" }), _jsx("option", { value: "bullets", children: "Bullets" })] }), _jsx("button", { onClick: () => removeBlock(selectedSlide.id, block.id), className: "px-2 py-1 text-xs border border-destructive/50 text-destructive rounded hover:bg-destructive/10", children: "\u2715" })] }), block.kind === 'bullets' ? (_jsxs("div", { className: "space-y-1", children: [block.bullets.map((bullet, bulletIdx) => (_jsxs("div", { className: "flex gap-1", children: [_jsx("input", { type: "text", value: bullet, onChange: (e) => {
                                                                            const newBullets = [...block.bullets];
                                                                            newBullets[bulletIdx] = e.target.value;
                                                                            updateBullets(selectedSlide.id, block.id, newBullets);
                                                                        }, className: "flex-1 px-2 py-1 border rounded text-sm bg-background" }), _jsx("button", { onClick: () => {
                                                                            const newBullets = block.bullets.filter((_, i) => i !== bulletIdx);
                                                                            updateBullets(selectedSlide.id, block.id, newBullets);
                                                                        }, className: "px-2 text-xs text-destructive hover:bg-destructive/10", children: "\u2715" })] }, bulletIdx))), _jsx("button", { onClick: () => updateBullets(selectedSlide.id, block.id, [...block.bullets, '']), className: "w-full px-2 py-1 border border-dashed rounded text-xs hover:bg-muted/20", children: "+ Add Bullet" })] })) : (_jsx("textarea", { value: block.text, onChange: (e) => updateBlock(selectedSlide.id, block.id, e.target.value), rows: block.kind === 'body' ? 4 : 2, className: "w-full px-2 py-1 border rounded text-sm bg-background resize-none" })), _jsxs("div", { className: "flex gap-1", children: [_jsx("button", { onClick: () => moveBlockUp(selectedSlide.id, block.id), disabled: idx === 0, className: "flex-1 px-2 py-1 border rounded text-xs hover:bg-muted/20 disabled:opacity-50", children: "\u2191" }), _jsx("button", { onClick: () => moveBlockDown(selectedSlide.id, block.id), disabled: idx === selectedSlide.blocks.length - 1, className: "flex-1 px-2 py-1 border rounded text-xs hover:bg-muted/20 disabled:opacity-50", children: "\u2193" })] })] }, block.id))), _jsxs("div", { className: "space-y-1", children: [_jsx("label", { className: "block text-xs", children: "Add Block" }), _jsxs("div", { className: "grid grid-cols-2 gap-1", children: [_jsx("button", { onClick: () => addBlock(selectedSlide.id, 'title'), className: "px-2 py-1 border border-dashed rounded text-xs hover:bg-muted/20", children: "+ Title" }), _jsx("button", { onClick: () => addBlock(selectedSlide.id, 'subtitle'), className: "px-2 py-1 border border-dashed rounded text-xs hover:bg-muted/20", children: "+ Subtitle" }), _jsx("button", { onClick: () => addBlock(selectedSlide.id, 'body'), className: "px-2 py-1 border border-dashed rounded text-xs hover:bg-muted/20", children: "+ Body" }), _jsx("button", { onClick: () => addBlock(selectedSlide.id, 'bullets'), className: "px-2 py-1 border border-dashed rounded text-xs hover:bg-muted/20", children: "+ Bullets" })] })] })] })] })] }))] })] }));
}
